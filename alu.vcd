$date
	Wed May 13 17:58:35 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu_tb $end
$var wire 1 ! zero_detection $end
$var wire 16 " result [15:0] $end
$var reg 16 # a [15:0] $end
$var reg 16 $ b [15:0] $end
$var reg 4 % s [3:0] $end
$scope module u1 $end
$var wire 16 & a [15:0] $end
$var wire 16 ' b [15:0] $end
$var wire 16 ( result [15:0] $end
$var wire 4 ) s [3:0] $end
$var wire 16 * temp_result [15:0] $end
$var wire 16 + ror_result [15:0] $end
$var wire 16 , rol_result [15:0] $end
$var reg 2 - mux_select [1:0] $end
$var reg 16 . other_result [15:0] $end
$var reg 1 ! zero_detection $end
$scope module mux_1 $end
$var wire 16 / d2 [15:0] $end
$var wire 2 0 s [1:0] $end
$var wire 16 1 d1 [15:0] $end
$var wire 16 2 d0 [15:0] $end
$var reg 16 3 y [15:0] $end
$upscope $end
$scope module rl1 $end
$var wire 16 4 n [15:0] $end
$var wire 16 5 value [15:0] $end
$var reg 16 6 result [15:0] $end
$var reg 16 7 temp [15:0] $end
$var reg 16 8 temp2 [15:0] $end
$upscope $end
$scope module rr1 $end
$var wire 16 9 n [15:0] $end
$var wire 16 : value [15:0] $end
$var reg 16 ; result [15:0] $end
$var reg 16 < temp [15:0] $end
$var reg 16 = temp2 [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 =
b101 <
b101000000000000 ;
b101 :
b100 9
b1010000 8
b0 7
b1010000 6
b101 5
b100 4
b1001 3
b1010000 2
b101000000000000 1
b10 0
b1001 /
b1001 .
b10 -
b1010000 ,
b101000000000000 +
b1001 *
b0 )
b1001 (
b101 '
b100 &
b0 %
b101 $
b100 #
b1001 "
0!
$end
#40
b1111111111111111 "
b1111111111111111 (
b1111111111111111 *
b1111111111111111 3
b1111111111111111 .
b1111111111111111 /
b1 %
b1 )
#80
b1111111111111011 "
b1111111111111011 (
b1111111111111011 *
b1111111111111011 3
b1111111111111011 .
b1111111111111011 /
b10 %
b10 )
#120
b10000000 "
b10000000 (
b10000000 *
b10000000 3
b10000000 .
b10000000 /
b11 %
b11 )
#160
b0 "
b0 (
b0 *
b0 3
b0 .
b0 /
b100 %
b100 )
#200
b100 "
b100 (
b100 *
b100 3
1!
b100 .
b100 /
b101 %
b101 )
#240
b101 "
b101 (
b101 *
b101 3
0!
b101 .
b101 /
b110 %
b110 )
#280
b1 "
b1 (
b1 *
b1 3
b1 .
b1 /
b111 %
b111 )
#320
b0 "
b0 (
b0 *
b0 3
b0 .
b0 /
b1000 %
b1000 )
#360
b1010000 "
b1010000 (
b1010000 *
b1010000 3
1!
b0 -
b0 0
b1001 %
b1001 )
#400
b101000000000000 "
b101000000000000 (
b101000000000000 *
b101000000000000 3
0!
b1 -
b1 0
b1010 %
b1010 )
#440
b10100 "
b10100 (
b10100 *
b10100 3
b10 -
b10 0
b10100 .
b10100 /
b1011 %
b1011 )
#480
b0 "
b0 (
b0 *
b0 3
b0 .
b0 /
b1100 %
b1100 )
#520
